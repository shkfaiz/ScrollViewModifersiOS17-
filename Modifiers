struct ScrollTargetLayoutModifier: ViewModifier {
    var isEnabled: Bool

    func body(content: Content) -> some View {
        if isEnabled {
            if #available(iOS 17.0, *) {
                content.scrollTargetLayout()
            } else {
                content
            }
        }
    }
}

extension View {
    func scrollLayout(isEnabled: Bool) -> some View {
        modifier(ScrollTargetLayoutModifier(isEnabled: isEnabled))
    }
}

struct ScrollTargetBehaviorModifier: ViewModifier {

    func body(content: Content) -> some View {
        if #available(iOS 17.0, *) {
            content.scrollTargetBehavior(.viewAligned)
        } else {
            content
        }
    }
}

extension View {
    func scrollTargetBehavior() -> some View {
        modifier(ScrollTargetBehaviorModifier())
    }
}

struct ScrollTransitionModifier: ViewModifier {
    var isAnimated: Bool

    func body(content: Content) -> some View {
        if isAnimated {
            if #available(iOS 17.0, *) {
                content.scrollTransition(.animated) { content, phase in
                    content
                        .scaleEffect(phase != .identity ? 0.93 : 1)
                        .opacity(phase != .identity ? 0.8 : 1)
                }
            } else {
                content
            }
        } else {
            content
        }
    }
}

extension View {
    func scrollTransitionEffect(animated: Bool) -> some View {
        modifier(ScrollTransitionModifier(isAnimated: animated))
    }
}

struct ScrollClipDisabledModifier: ViewModifier {
    var isDisabled: Bool

    func body(content: Content) -> some View {
        if isDisabled {
            if #available(iOS 17.0, *) {
                content.scrollClipDisabled()
            } else {
                content
            }
        } else {
            content
        }
    }
}

extension View {
    func scrollClipDisabledModifier(isDisabled: Bool) -> some View {
        modifier(ScrollClipDisabledModifier(isDisabled: isDisabled))
    }
}
